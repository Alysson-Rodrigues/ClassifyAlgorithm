numAlphabet = {" ": -1, "a": 0,
               "b": 1, "c": 2, "d": 3, "e": 4, "f": 5, "g": 6, "h": 7, "i": 8, "j": 9, "k": 10, "l": 11, "m": 12, "n": 13, "o": 14, "p": 15, "q": 16, "r": 17, "s": 18, "t": 19, "u": 20, "v": 21, "w": 22, "x": 23, "y": 24, "z": 25, ",": 26, ".": 27, }


def classify(string):
    # If the string is just a single character, pontuate it immediately
    string = string.lower()
    pontuation = 0
    if len(string) == 1:
        pontuation = numAlphabet[string]
        return pontuation
    # If the string is not a single character, puntuate it lettter by letter
    else:
        index = 0
        endPontuation = []
        for i in string:
            # this code creates a list with a numerical index for each letter in the string
            endPontuation.append(numAlphabet[i])
            index = index + 1
    return endPontuation


def compareIndex(factor1, factor2):
    # this method expects two lists of numbers, representing the characters in the alphabet generated by "classify" function
    index = 0
    for i in factor1:
        if factor2[index] == None:
            return 1
            break
        elif i < factor2[index]:
            return 0
            break
        elif i > factor2[index]:
            return 1
            break
        index = index + 1
    return 0


result = []
resultDict = {}


def sort(str):
    text = str.split(' ')
    index = 0
    txtDict = {}
    for i in text:
        txtDict[index] = classify(i)
        index = index + 1

    majorIndex = 0
    changesMade = 0

    for i in txtDict:
        if (majorIndex + 1) not in txtDict:
            return txtDict
            break
        major = compareIndex(txtDict[majorIndex], txtDict[majorIndex + 1])
        if major == 1:
            new0 = txtDict[i + 1]
            new1 = txtDict[i]
            txtDict[i] = new0
            txtDict[i + 1] = new1
            changesMade = changesMade + 1
            majorIndex = majorIndex + 1
        else:
            continue


print(sort('Denilson Ama cafe e alana adora mate'))
